<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Let's Go Exploring!</title><description>notes on aws, android and hacks.</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Tue, 08 Dec 2015 07:51:17 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>AWS Lambda : Missing piece of AWS Orchestration</title><description>&lt;p&gt;Last winter I was working on a small internal tool; one that should pull some files from an S3 folder sanitize and aggregate them and drop them in another S3 folder, no more than 10 lines of code. Running an EC2 instance, even a tiny one, to handle couple of&lt;/p&gt;</description><link>http://localhost:2368/aws-lambda-missing-piece-of-aws-orchestration/</link><guid isPermaLink="false">408c6817-bf0c-4bfb-b5f9-c1a82d2824be</guid><category>aws</category><category>lambda</category><category>orchestration</category><dc:creator>Engin Dogusoy</dc:creator><pubDate>Tue, 08 Dec 2015 07:03:13 GMT</pubDate><content:encoded>&lt;p&gt;Last winter I was working on a small internal tool; one that should pull some files from an S3 folder sanitize and aggregate them and drop them in another S3 folder, no more than 10 lines of code. Running an EC2 instance, even a tiny one, to handle couple of calls per day, each running less than 5 seconds, was just wasteful. Spending a single minute every day to check it is health would’ve taken longer than the actual job at hand. Setting up a Data Pipeline with a ShellCommandActivity was almost equally wasteful and not responsive enough. Setting up a job queue and some webhooks would have taken unnecessarily long development time for such a simple job. AWS was missing its trigger.&lt;/p&gt;

&lt;p&gt;I was so happy when I read about then newly released Lambda. I didn’t know node.js, console and S3 bucket notifications had a couple of bugs and develop-test cycle was cumbersome, but it didn’t matter. Lambda was the most elegant solution; it was there when I needed and gone when it is done.&lt;/p&gt;

&lt;p&gt;Since then Lambda came a long way; it got Python and Java in addition to node, has a much better console and some templates to start with, it is more reliable and some limitations are relaxed. It can be triggered on a schedule or by mobile devices now. And of course, it became best friends with AWS API Gateway to build serverless backends. Nowadays people build frameworks on top of it to create serverless applications.&lt;/p&gt;

&lt;p&gt;Lambda is changing the notion of traditional backend in such a radical way that its other benefit; connecting AWS resources to each other in the most simplest way is just overshadowed. By making it possible to trigger Lambda from other services, Amazon simply increased value of all services that can interact with Lambda. It became truly “on demand”. I am using Lambda to make decisions as I pass data between services, start/stop services and sanitize some calls from mobile devices to our backend.&lt;/p&gt;

&lt;p&gt;Next time you design a backend system or an internal tool, consider Lambda to be the glue that keeps your bigger blocks together.&lt;/p&gt;</content:encoded></item><item><title>Understanding HIDs</title><description>&lt;p&gt;Mouses, keyboards, game controllers are every day devices we expect to work with our systems seamlessly. We don’t even have patience to download and install their drivers. We want them to work magically. Magical is convenient. But what is the main ingredient of magic?&lt;/p&gt;

&lt;p&gt;I have a Ps4 lying&lt;/p&gt;</description><link>http://localhost:2368/understanding-hids/</link><guid isPermaLink="false">1b9f1229-db80-4aaf-9363-ed36fbcfccbb</guid><category>hacks</category><category>demo</category><category>ps4</category><category>usb</category><category>hid</category><dc:creator>Engin Dogusoy</dc:creator><pubDate>Tue, 08 Dec 2015 06:59:47 GMT</pubDate><content:encoded>&lt;p&gt;Mouses, keyboards, game controllers are every day devices we expect to work with our systems seamlessly. We don’t even have patience to download and install their drivers. We want them to work magically. Magical is convenient. But what is the main ingredient of magic?&lt;/p&gt;

&lt;p&gt;I have a Ps4 lying around for the past couple of weeks and honestly I am not excited about it at all. The controller, DualShock 4, is another story. I must give kudos to Sony for equipping this controller with various tricks and believing in developer’s creativity. As the platform owner, they have made the controller as interactive as they can and challenged developers to utilize these features in most creative ways. My weekend goal is to get to know Dualshock 4, particularly it’s touch-pad, without using a Playstation SDK (Because I don’t have one).&lt;/p&gt;

&lt;p&gt;I’ve started my search with Tested’s article on using Ps4 as a PC controller. DS4Tool is an impressive tool that hides your DS4 behind a ,Windows-supported, Xbox 360 controller driver and as a result make it possible for you to use DS4 with PC games. Unfortunately I wasn’t able to find any source code so I ventured forth to a similar project; PS4PC.&lt;/p&gt;

&lt;p&gt;PS4PC is a lightweight executable that maps PS4 touch-pad to your mouse. After playing with it for a while, now that I knew it is actually possible to use touch-pad on a PC, I was excited to learn more about USB devices.&lt;/p&gt;

&lt;p&gt;Couple of hours of quick-and-dirty Google searches and going over partially helpful sources, wikis and code pieces, I knew good enough to say a couple of lines about USB devices and HIDs. The interaction between a USB device and a PC depends on simply polling. PC frequently “reads” the device and as a result the device returns a report, represented as a byte array, which holds information about device state. Of course it is a two-way street, PC can create a report and “write” to device to trigger features such as haptic feedback.&lt;/p&gt;

&lt;p&gt;OK, now that we know how communication works, how do we specify content? That’s where our best friend HID comes in. HID is simply a contract between device producer and it’s future owners. It is, in a way, a map that explains meaning of each byte in the report. 6th byte may be the state of your left mouse button; either clicked or not. Of course, HIDs are pretty short and predictable for simpler USB devices such as regular mouses, but they may become beasts with devices such as DualShock 4. Realizing Sony has not released a public HID, my hopes for touch-pad integration were failing as I found out that some geniuses decided to decode HID on their own, great!&lt;/p&gt;

&lt;p&gt;The rest was pretty simple; pick up an HID library project for C#, Java or your favorite language, find vendor and product ids for your device through Control Panel, write a simple program that reads your device in short time intervals and get the information you want by mapping bytes into booleans, integers, etc. using HID. One interesting characteristic with USB interaction is the concept of continuous information flow. Working mostly on mobile platforms nowadays, I tend to think event based interaction, someone tapping on a button, swiping, etc. However with USB devices there is always information coming in and it’s your job as the developer to decide what constitutes an event and react to it.&lt;/p&gt;

&lt;p&gt;That’s about it; 5–6 hours, 2 pots of coffee, couple of mutterings and frustrations here there resulted in a DualShock 4 talking to a PC. If you are looking for an interesting weekend, pick your favorite USB device and try to see what lies under the driver, you may be surprised.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This experiment actually turned into a &lt;a href="https://www.youtube.com/watch?v=enVsFl9Lu3U"&gt;demo&lt;/a&gt;!&lt;/p&gt;</content:encoded></item></channel></rss>